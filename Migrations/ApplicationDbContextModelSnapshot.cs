// <auto-generated />
using System;
using EFCoreBase.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dia1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("EFCoreBase.Model.Categoria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activa")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Activa = true,
                            FechaAlta = new DateTime(2020, 1, 26, 22, 45, 48, 696, DateTimeKind.Local).AddTicks(1510),
                            Nombre = "Desarrollo Web"
                        },
                        new
                        {
                            ID = 2,
                            Activa = true,
                            FechaAlta = new DateTime(2020, 1, 26, 22, 45, 48, 703, DateTimeKind.Local).AddTicks(5100),
                            Nombre = "Desarrollo Móvil"
                        },
                        new
                        {
                            ID = 3,
                            Activa = true,
                            FechaAlta = new DateTime(2020, 1, 26, 22, 45, 48, 703, DateTimeKind.Local).AddTicks(5120),
                            Nombre = "Microsoft"
                        },
                        new
                        {
                            ID = 4,
                            Activa = true,
                            FechaAlta = new DateTime(2020, 1, 26, 22, 45, 48, 703, DateTimeKind.Local).AddTicks(5130),
                            Nombre = "Seguridad"
                        });
                });

            modelBuilder.Entity("EFCoreBase.Model.Curso", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoriaID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaID");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("EFCoreBase.Model.Matriculacion", b =>
                {
                    b.Property<int>("EstudianteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CursoID")
                        .HasColumnType("INTEGER");

                    b.HasKey("EstudianteID", "CursoID");

                    b.HasIndex("CursoID");

                    b.ToTable("Matriculaciones");
                });

            modelBuilder.Entity("EFCoreBase.Model.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellidos")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");
                });

            modelBuilder.Entity("EFCoreBase.Model.Estudiante", b =>
                {
                    b.HasBaseType("EFCoreBase.Model.Usuario");

                    b.HasDiscriminator().HasValue("Estudiante");
                });

            modelBuilder.Entity("EFCoreBase.Model.Profesor", b =>
                {
                    b.HasBaseType("EFCoreBase.Model.Usuario");

                    b.Property<int>("CursoID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CursoID")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Profesor");
                });

            modelBuilder.Entity("EFCoreBase.Model.Curso", b =>
                {
                    b.HasOne("EFCoreBase.Model.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID");
                });

            modelBuilder.Entity("EFCoreBase.Model.Matriculacion", b =>
                {
                    b.HasOne("EFCoreBase.Model.Curso", "Curso")
                        .WithMany("Participantes")
                        .HasForeignKey("CursoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreBase.Model.Estudiante", "Estudiante")
                        .WithMany("Cursos")
                        .HasForeignKey("EstudianteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreBase.Model.Profesor", b =>
                {
                    b.HasOne("EFCoreBase.Model.Curso", "Curso")
                        .WithOne("Profesor")
                        .HasForeignKey("EFCoreBase.Model.Profesor", "CursoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
